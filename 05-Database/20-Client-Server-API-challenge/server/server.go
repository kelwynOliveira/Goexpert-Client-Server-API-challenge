package server

import (
	"fmt"
	"log"
	"net/http"
	"os"
	"time"
)

// The server.go must consume the API containing the Dollar/Real exchange rate at the address: https://economia.awesomeapi.com.br/json/last/USD-BRL
func RequestQuotation() {
	request, err := http.Get("https://economia.awesomeapi.com.br/json/last/USD-BRL")
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error accessing %v.\n", err)
	}
	// defer request.Body.Close()
}

// The necessary endpoint generated by server.go for this challenge will be: /cotacao and the port to be used by the HTTP server will be 8080.
func Server() {
	http.HandleFunc("/cotacao", SearchCEP)
	http.ListenAndServe(":8080", nil)
}

// The client.go will only need to receive the current exchange rate from the server.go (JSON "bid" field).
func SendBID(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()
	log.Println("Requesting...")
	defer log.Println("Requeste finished.")
	select {
	case <-time.After(5 * time.Second):
		// Prints on stdout
		log.Println("Request succeeded.")
		// Prints on browser
		w.Write([]byte("Request cancelled."))
	case <-ctx.Done():
		// Prints on stdout
		log.Println("Request cancelled by client")
	}

	w.Write([]byte("Hello, World!"))
}
